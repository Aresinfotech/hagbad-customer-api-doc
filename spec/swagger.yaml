swagger: "2.0"
schemes:
  - https
host: hagbad.greysystems.eu
basePath: /api/v1
info:
  version: 1.0.0-beta
  title: Hagbad Customer Online REST API
  contact:
    email: developers@greysystems.eu
    name: Contact URL
    url: "http://www.greysystems.eu/#contact"
  license:
    name: All Rights reserved GreySystems 2022
    url: "http://www.greysystems.eu"
  termsOfService: "https://www.greysystems.eu"
  x-logo:
    url: "http://www.greysystems.eu/wp-content/uploads/2017/07/logo-Grey-menu.png"
    background: "#FFFFFF"
  description: |
    This page contains the documentation on how to use the Hagbad API.

    **API is in beta version, breaking changes may be introduced before the final release candidate is released**

    # Introduction

    The Hagbad  API is built on top of HTTP:
    - RESTFul
    - Predictable resource URLs. 
    - Accepts and returns JSON in the HTTP body. 
    - Returns HTTP response codes to indicate errors. 

    You can use your favorite HTTP/REST library for your programming language to consume this API. 

    # The Hagbad System
    The Hagbad  is an integrated set of APIs to create and manage moneypools created by customers for other customers.
    There are the differentes modules exposed by this API: 

    * **Configuration**: Manage the partner configuration. For now on, the configuration is created by the Hagbad team.
    * **Catalogs**: This module is used to get the catalog information like countries, cities, states, currencies, etc 
    * **Customers**: Register and manage the system customer. 
    * **Moneypools**: Manage the lifecycle of a moneypool (creation, start, etc).
    * **Invitation**: This module gives the ability to invite and accept moneypools' invitations.
    * **Joining Request**: This module gives the ability to request moneypools' participations.
    * **Notifications**: Receives notifications in a RESTFul way with the latest events happened.
    * **Payments**: Make payments to moneypools members.


    # Authentication
    ### Please, note that the customers should already be registered in the system, in order to get access to the system.

    All Hagbad APIs, including this one, use [OpenId Connect](http://openid.net) protocol to authenticate customers. Specifically the security tokens used are JWT tokens. 

    To issue new tokens, you have to use the Hagbad OpenId compliant server located at https://hagbad.greysystems.eu/auth (for more info please check [GreySystems Identity Server Doc](https://grey-systems.github.io/gs-identity-doc/))

    * **User Token**: Gets an  `access_token` issued on behalf of an end-user. To get an user access_token you have to implement the [Authorization Code Flow](https://www.keycloak.org/docs/3.3/server_admin/topics/sso-protocols/oidc.html). 

    **How I use the tokens?**
     As stated in the introduction, both tokens types are JWT tokens, and you should set that token in the HTTP `Authorization` Header of the API call in this way: 

    ```
    Authorization: Bearer {the_token}
    ```

    # Common HTTP Error Responses

    The Rest API uses the following common HTTP status codes to communicate general issues or errors to the clients: 

    * HTTP **400** (Invalid Request): The request provided is invalid (request is not well formed, a mandatory field is not provided, etc..). 
    * HTTP **403** (Forbidden): You are not allowed to access or update the requested resource. 
    * HTTP **404** (Not found): The searched item could not be found (the moneypool was not found, etc..). 
    * HTTP **409** (Conflict): There is a conflict when trying to execute the operation (status change not allowed, etc..). 
    * HTTP **500** (Internal Server Error): Some internal component has failed to process your request. Please notify about this error to GreySystems team.
tags:
  - name: configuration
    description: This section details the available operations related to the partner configuration.
  - name: catalogs
    description: This section explains how to access different the catalogs availables in the system.
  - name: customers registration
    description: Customer management operations.
  - name: customers management
    description: Customer management operations.
  - name: marketplace
    description: | 
      Manage moneypoolÂ´s marketplace.

      This section define all the resources related with the marketplace. A marketplace is the place where you can see all the Moneypools defined in the system.
  - name: moneypools
    description: Manage moneypool operation.
  - name: moneypool invitations
    description: Manage moneypool invitations.
  - name: moneypool joining request
    description: Manage moneypool joining requests.
  - name: notifications
    description: Notification management operations.
  - name: payments
    description: Make payments to moneypools members.   
securityDefinitions:
  JWT:
    description: "You can obtain a JSON Web Token (`access_token`), using our OpenID Connect Authorizations Server"
    type: apiKey
    name: "Authorization: Bearer access_token"
    in: header
security:
  - JWT: []
paths:
  "/catalog/country":
    get:
      tags:
        - catalogs
      summary: Get countries.
      description: Returns the entire list of countries.
      responses:
        "200":
          description: Returns the entire list of countries.
          schema:
            type: array
            items:
              $ref: "#/definitions/Country"
        "400":
          description: "Invalid parameters, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
  "/catalog/country/{iso2}":
    get:
      tags:
        - catalogs
      summary: Get country by ISO-Alpha2 Code.
      description: Returns the country given its ISO-Alpha2 code.
      parameters:
        - name: iso2
          in: path
          required: true
          type: String
          description: ISO-Alpha2 Code.
      responses:
        "200":
          description: Returns the country details.
          schema:
            $ref: "#/definitions/Country"
        "400":
          description: "Invalid parameters, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Country not found.
          schema:
            $ref: "#/definitions/Error"
  "/catalog/country/{iso2}/city":
    get:
      tags:
        - catalogs
      summary: Search cities by country and name.
      description: "Returns a list of cities, filtering them by country and by the name passed by parameters. The name must contain at least three characters."
      parameters:
        - name: iso2
          in: path
          required: true
          type: String
          description: ISO-ALpha2 Code.
        - name: name
          in: query
          required: true
          type: String
          description: "City name, minimum length three characters."
      responses:
        "200":
          description: Returns a list with the cities which match the filter.
          schema:
            type: array
            items:
              $ref: "#/definitions/City"
        "400":
          description: "Invalid parameters, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Country or cities not found.
          schema:
            $ref: "#/definitions/Error"
  "/catalog/country/{iso2}/city/{cityId}":
    get:
      tags:
        - catalogs
      summary: Get city by ID.
      description: Returns a city given its identifier.
      parameters:
        - name: iso2
          in: path
          required: true
          type: String
          description: ISO-ALpha2 Code.
        - name: cityId
          in: path
          required: true
          type: BigInteger
          description: City identifier.
      responses:
        "200":
          description: Returns the city given its identifier.
          schema:
            $ref: "#/definitions/City"
        "400":
          description: "Invalid parameters, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Country or city not found.
          schema:
            $ref: "#/definitions/Error"

  "/catalog/country/{iso2}/state":
    get:
      tags:
        - catalogs
      summary: Search states by country and name.
      description: "Returns a list of states, filtering them by country and by the name passed by parameters. The name is not mandatory, but if is informed it must contain at least three characters."
      parameters:
        - name: iso2
          in: path
          required: true
          type: String
          description: ISO-ALpha2 Code.
        - name: name
          in: query
          required: false
          type: String
          description: "State name, minimum length three characters. If this parameter is not informed, it will return all available states in the country."
      responses:
        "200":
          description: Returns a list with the states.
          schema:
            type: array
            items:
              $ref: "#/definitions/State"
        "400":
          description: "Invalid parameters, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Country or states not found.
          schema:
            $ref: "#/definitions/Error"
  "/catalog/country/{iso2}/state/{stateId}":
    get:
      tags:
        - catalogs
      summary: Get state by ID.
      description: Returns a state given its identifier.
      parameters:
        - name: iso2
          in: path
          required: true
          type: String
          description: ISO-ALpha2 Code.
        - name: stateId
          in: path
          required: true
          type: BigInteger
          description: State identifier
      responses:
        "200":
          description: Returns the state given its identifier.
          schema:
            $ref: "#/definitions/State"
        "400":
          description: "Invalid parameters, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Country or state not found.
          schema:
            $ref: "#/definitions/Error"
  "/catalog/currency":
    get:
      tags:
        - catalogs
      summary: Get currencies.
      description: Returns the entire list of currencies.
      responses:
        "200":
          description: Returns the entire list of currencies.
          schema:
            type: array
            items:
              $ref: "#/definitions/Currency"
        "400":
          description: "Invalid parameters, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
  "/catalog/currency/{iso}":
    get:
      tags:
        - catalogs
      summary: Get currency by ISO code.
      description: Returns the currency by ISO code.
      parameters:
        - name: iso
          in: path
          required: true
          type: String
          description: ISO Code.
      responses:
        "200":
          description: Returns the currency details.
          schema:
            $ref: "#/definitions/Currency"
        "400":
          description: "Invalid parameters, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Currency not found.
          schema:
            $ref: "#/definitions/Error"
  "/catalog/movement/type":
    get:
      tags:
        - catalogs
      summary: Get Movement types
      description: Returns the movement types supported by the system.
      responses:
        "200":
          description: Returns the supported movement types.
          schema:
            type: array
            example: ["DEBIT", "CREDIT"]
        "400":
          description: "Invalid parameters, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
  "/configuration":
    get:
      tags:
        - configuration
      summary: Get Partner configuration.
      description: |
        Provide the basic configuration of the partner. 

        This endpoint should be called when the application starts, in order to have all the configuration values available from the beginning.
      responses:
        "200":
          description: "Return current partner configuration."
          schema:
            $ref: "#/definitions/PartnerConfiguration"
        "404":
          description: Partner not found.
          schema:
            $ref: "#/definitions/Error"
  "/customer/registration/start":
    post:
      summary: Start a new customer registration flow.
      description: | 
        Start a new registration flow. If the customer does not exist in the system, this method will return a registration key that you must use in the next steps. 
        Also an OTP code will be sent to the given phone number.

        `This resource is accessible without authorization`
      operationId: customerRegistrationStart
      parameters:
        - name: StartRegistrationRequest
          in: body
          required: true
          schema:
            $ref: "#/definitions/StartRegistrationRequest"
      tags:
        - customers registration
      responses:
        "200":
          description: Returns the generated registration key.
          schema:
            $ref: "#/definitions/StartRegistrationResponse"
        "400":
          description: Invalid Request. message attribute of response contains detailed information about the issue.
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: Conflict. The given phone number already exists in the system.
          schema:
            $ref: "#/definitions/Error"
  "/customer/registration/{registrationKey}/resend-code":
    put:
      summary: Resend OTP code
      description: | 
        Use this resource to resend the registration's OTP code to the phone given in the registration.

        `This resource is accessible without authorization`
      operationId: customerRegistrationResendOTPCode
      tags:
        - customers registration
      responses:
        "204":
          description: A new OTP code has been sent to the registration's phone.
  "/customer/registration/verify":
    post:
      summary: Verify the started customer's registration
      description: |
        When the registration starts, an OTP code is sent to the given phone number. Use this resource to verify the phone number. 

        If the customer already exist in the remmitance system, the found customer's information is returned in the response.
        
        `This resource is accessible without authorization`
      operationId: customerRegistrationVerify
      parameters:
        - name: VerifyRegistrationRequest
          in: body
          required: true
          schema:
            $ref: "#/definitions/VerifyRegistrationRequest"
      tags:
        - customers registration
      responses:
        "200":
          description: Returns the customer info (if found in the remmitance system).
          schema:
            $ref: "#/definitions/VerifyRegistrationResponse"
        "400":
          description: Invalid Request. message attribute of response contains detailed information about the issue.
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: Registration key not valid
          schema:
            $ref: "#/definitions/Error"
        "410":
          description: Verification code (OTP) expired
          schema:
            $ref: "#/definitions/Error"
  "/customer/registration/complete":
    post:
      summary: Finish the customer's registration
      description: |
        Finish the started registration flow. 

        If the customer already exist in the remmitance system, only the email can be modified. Otherwise, the customer must fill all the required fields but the customer code (that is provided by the remmitance system)

        `This resource is accessible without authorization`
      operationId: customerRegistrationVerify
      parameters:
        - name: X-Hagbad-Customer-Device-SSID
          in: header
          required: false
          type: String
          description: The device Id. This field is optional. You can use this header to auto-register the customer's device
        - name: CompleteRegistrationRequest
          in: body
          required: true
          schema:
            $ref: "#/definitions/CompleteRegistrationRequest"
      tags:
        - customers registration
      responses:
        "200":
          description: The registration has finished successfully
        "400":
          description: Invalid Request. message attribute of response contains detailed information about the issue.
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: Registration key not validated or the email already exist in the system
          schema:
            $ref: "#/definitions/Error"
  "/customer/registration/recovery-user-password":
    put:
      summary: Recovery user's password.
      description: |
        Recovery the user's password sending a recovery mail to the given direction.
      operationId: recoveryUserPassword
      parameters:
        - name: UserPasswordRecoveryRequest
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserPasswordRecoveryRequest"
      tags:
        - customers registration
      responses:
        "204":
          description: The recovery emails was sent properly.
        "400":
          description: Invalid Request. message attribute of response contains detailed information about the issue.
          schema:
            $ref: "#/definitions/Error"
  "/customer/registration/change-user-password":
    put:
      summary: Change the current user's password.
      description: |
        Change the current user's password.
      operationId: recoveryUserPassword
      parameters:
        - name: UserPasswordChangeRequest
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserPasswordChangeRequest"
      tags:
        - customers registration
      responses:
        "204":
          description: The recovery emails was sent properly.
        "400":
          description: Invalid Request. message attribute of response contains detailed information about the issue.
          schema:
            $ref: "#/definitions/Error" 
  "/customer/search":
    post:
      summary: Search customers.
      description: |
        Search customers given some parameters. You will have two different ways to search customers:
        - SearchCustomerRequest object in the request body.
        - SearchParam value as Query param. This method will search customers with something similar to the given param in their nickname or email.
      operationId: searchCustomers
      tags:
        - customers management
      parameters:
        - name: Search request parameters.
          in: body
          required: false
          schema:
            $ref: "#/definitions/SearchCustomerRequest"
        - name: searchParam
          in: query
          required: false
          type: String
          description: search param to search by in customer nickname or email.
        - name: page
          in: query
          required: false
          type: Integer
          description: Page number.
        - name: elementsPerPage
          in: query
          required: false
          type: Integer
          description: Number of elements per page.
      responses:
        "200":
          description: Find one or more Customers matching with the search parameters. Not find any Customer matching with the search parameters (empty array).
          schema:
            type: array
            items:
              $ref: "#/definitions/SearchCustomerResponse"
        "400":
          description: "Invalid parameters, response contains detailed error"
          schema:
            $ref: "#/definitions/Error"
  "/customer/profile":
    get:
      summary: Get customer profile.
      description: Return the profile information of the logged customer.
      operationId: getCustomerProfile
      parameters:
      tags:
        - customers management
      responses:
        "200":
          description: Returns the profile information of the logged customer.
          schema:
            $ref: "#/definitions/CustomerProfileInformation"
  "/customer/movement":
    get:
      summary: Get customer movements.
      description: Return a list with the movements of the customer
      operationId: getCustomerMovement
      parameters:
        - name: page
          in: query
          required: false
          type: Integer
          description: The requested page.
        - name: elementsPerPage
          in: query
          required: false
          type: Integer
          description: How many elements per page.
      tags:
        - customers management
      responses:
        "200":
          description: Returns the movements of the given customer. Returns an empty list if the customer doesnât have any movement.
          schema:
            $ref: "#/definitions/GetMovementResponse"
        "400":
          description: "Invalid parameters, response contains detailed error"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Customer not found.
          schema:
            $ref: "#/definitions/Error"
  "/customer/movement/search":
    post:
      summary: Search customer movements.
      description: Return a list with the movements found by the given criteria
      operationId: searchCustomerMovement
      parameters:
        - name: page
          in: query
          required: false
          type: Integer
          description: The requested page.
        - name: elementsPerPage
          in: query
          required: false
          type: Integer
          description: How many elements per page.
        - name: Search request parameters.
          in: body
          required: true
          schema:
            $ref: "#/definitions/GetMovementRequest"
      tags:
        - customers management
      responses:
        "200":
          description: Returns the movements found to the given search criteria. Returns an empty list if the customer doesnât have any movement.
          schema:
            $ref: "#/definitions/GetMovementResponse"
        "400":
          description: "Invalid parameters, response contains detailed error"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Customer not found.
          schema:
            $ref: "#/definitions/Error"
  "/customer/moneypool":
    get:
      summary: Get customer moneypools.
      description: Return a list with the customer moneypools, either as host or member.
      operationId: getCustomerMoneypools
      parameters:
      tags:
        - customers management
      responses:
        "200":
          description: Returns the moneypools of the given customer. Returns an empty list if the customer doesnât have any movement.
          schema:
            type: array
            items:
              $ref: "#/definitions/CustomerMoneypool"
        "400":
          description: "Invalid parameters, response contains detailed error"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Customer not found.
          schema:
            $ref: "#/definitions/Error"
  "/customer/image/upload":
    post:
      tags:
      - customers management
      summary: Upload a new customer image
      description: "Use this endpoint to upload a new image to the system \nKeep in\
        \ mind that the system will resize and transform the given image in order\
        \ to adjust to the system requirements.\n\nOnce the image is uploaded, you\
        \ will give the image uploaded using the proper Get method"
      operationId: uploadImage
      parameters:
        - name: image
          in: formData
          required: false
          type: file
          description: The customer image to upload.
      responses:
        "201":
          description: The image has been process and uploaded successfully
        "400":
          description: Invalid image given
  "/marketplace":
    post:
      summary: Get the marketplace.
      description:
        "This method will return all *OPENED* and *PUBLIC* moneypools which start date is whithin the next 6 months. \n
        You can use this method to get the default marketplace's opened moneypools. If you want to adjust the marketplace with the customer's option, please review the resource `/marketplace/search`"
      operationId: searchMoneypools
      tags:
        - marketplace
      responses:
        "200":
          description: All opened moneypools in the last month. If no moneypool is already created, you will get an empty list.
          schema:
            type: array
            items:
              $ref: "#/definitions/Moneypool"
  "/marketplace/search":
    post:
      summary: Search moneypools in the marketplace.
      description: |
        "Search moneypools given some parameters. </br> </br> When filling the required parameters: 
          - If you inform the <strong>poolCode</strong> it isnât necessary to inform any other param, either the <strong>startDateFrom</strong> and <strong>startDateTo</strong>.
          - If you inform the the <strong>startDateFrom</strong> and <strong>startDateTo</strong>, it isn't necessary to inform any other param, but using any of the other filters you will narrow the results. 
          - By default (if any param is not informed except date ones), this method will return OPENED and PUBLIC moneypools."
      operationId: searchMoneypools
      tags:
        - marketplace
      parameters:
        - name: search request parameters.
          in: body
          required: true
          schema:
            $ref: "#/definitions/SearchMoneypoolRequest"
        - name: page
          in: query
          required: false
          type: Integer
          description: Page number.
        - name: elementsPerPage
          in: query
          required: false
          type: Integer
          description: Number of elements per page.
      responses:
        "200":
          description: Find one or more Moneypools matching with the search parameters. Not find any Moneypools matching with the search parameters (empty array).
          schema:
            type: array
            items:
              $ref: "#/definitions/Moneypool"
        "400":
          description: "Invalid parameters, response contains detailed error"
          schema:
            $ref: "#/definitions/Error"
  "/moneypool":
    post:
      summary: Save a moneypool.
      description: |
        This endpoint service will cover create and update moneypool functionalities depending on whether the moneypool identifier field is informed or not. If not, the service will create a new moneypool otherwise, it will update the provided one.

        * amountToSave: If the partner does not allow decimal numbers in its configuration, the amountToSave field must fulfill the following formula. Other case, this formula will not be necessary. 
        ```
        Remainder of: amountToSave/(numberOfMembers - 1) = 0
        ```
        It means that the division of the amountToSave between (numberOfMembers - 1) must be exact.

      operationId: saveMoneypool
      parameters:
        - name: SaveMoneypoolRequest
          in: body
          required: true
          schema:
            $ref: "#/definitions/SaveMoneypoolRequest"
      tags:
        - moneypools
      responses:
        "200":
          description: Moneypool successfully updated.
          schema:
            $ref: "#/definitions/MoneypoolDetail"
        "201":
          description: Moneypool successfully created.
          schema:
            $ref: "#/definitions/MoneypoolDetail"
        "400":
          description: Invalid Request. message attribute of response contains detailed information about the issue.
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: Update a moneypool in which you arenât the host.
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Moneypool not found.
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict. Duplicated moneypool code. Moneypool status does not allow changes."
          schema:
            $ref: "#/definitions/Error"
  "/moneypool/{id}/detail":
    get:
      summary: Get moneypool details by id.
      description: Get the moneypool complete information.
      operationId: getMoneypoolDetail
      tags:
        - moneypools
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The id of the moneypool
      responses:
        "200":
          description: Returns the complete information of the Moneypool.
          schema:
            $ref: "#/definitions/MoneypoolDetail"
        "400":
          description: "Invalid parameters, response contains detailed error"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Moneypool not found.
          schema:
            $ref: "#/definitions/Error"
  "/moneypool/{id}/status/{status}":
    put:
      summary: Update moneypool status.
      description: Update the status of a given moneypool.
      operationId: updateMoneypoolStatus
      tags:
        - moneypools
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: Moneypool id.
        - name: status
          in: path
          required: true
          type: String
          description: Moneypool status.
      responses:
        "200":
          description: Moneypool successfully updated.
        "400":
          description: "Invalid parameters, response contains detailed error"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: Update a moneypool in which you arenât the host.
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Moneypool not found.
          schema:
            $ref: "#/definitions/Error"
  "/moneypool/{id}/movement/":
    get:
      summary: Get moneypool movements.
      description: |
        Get the movements of a moneypool.
      operationId: getMovementByMoneypoolId
      tags:
        - moneypools
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The id of the moneypool
        - name: page
          in: query
          required: false
          type: Integer
          description: Page number.
        - name: elementsPerPage
          in: query
          required: false
          type: Integer
          description: Number of elements per page.
      responses:
        "200":
          description: Returns the movements of the given moneypool. Returns an empty list if the moneypool doesnât have any movement.
          schema:
            $ref: "#/definitions/GetMovementResponse"
        "400":
          description: "Invalid parameters, response contains detailed error"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Moneypool not found.
          schema:
            $ref: "#/definitions/Error"
  "/moneypool/{id}/available-positions":
    get:
      summary: Get moneypool available positions.
      description: Get the moneypool available positions.
      operationId: getMoneypoolAvailablePosition
      tags:
        - moneypools
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The id of the moneypool
      responses:
        "200":
          description: Returns the a list with moneypool's available positions.
          schema:
            type: array
            example: "[1,2,7]"
        "400":
          description: "Invalid parameters, response contains detailed error"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Moneypool not found.
          schema:
            $ref: "#/definitions/Error"

  "/moneypool/{id}/member/{memberId}/position-from/{positionFrom}/position-to/{positionTo}":
    put:
      summary: Update member position.
      description: |
        Update a member's position into the moneypool.
      operationId: updateMemberPosition
      tags:
        - moneypools
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The id of the moneypool
        - name: memberId
          in: path
          required: true
          type: BigInteger
          description: The id of the member we want to switch the position.
        - name: positionFrom
          in: path
          required: true
          type: Integer
          description: The position currently occupied by the member.
        - name: positionTo
          in: path
          required: true
          type: Integer
          description: The position that the member will occupy.
      responses:
        "200":
          description: Position successfully updated.
        "400":
          description: "Invalid parameters, response contains detailed error"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Moneypool not found. Member not found.
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: Moneypool can not be edited in the current state..
          schema:
            $ref: "#/definitions/Error"
  "/moneypool/{id}/member/{memberId}/position/{position}":
    delete:
      summary: Expel member from position.
      description: |
        Expel a member from a given position in the moneypool. 
        
        ### Important:
        If the member only has one position left he will be completely expelled from the moneypool.
      operationId: expelMemberPosition
      tags:
        - moneypools
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The id of the moneypool.
        - name: memberId
          in: path
          required: true
          type: BigInteger
          description: The id of the member.
        - name: position
          in: path
          required: true
          type: Integer
          description: The position from where the member will be expelled.
      responses:
        "200":
          description: Member successfully expelled from the position or the moneypool.
        "404":
          description: Moneypool not found. Member not found.
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: The host can not be totally expelled from the moneypool.
          schema:
            $ref: "#/definitions/Error"
  "/invitation":
    post:
      summary: Create an invitation.
      description: Invites a customer to join the moneypool.
      operationId: createInvitation
      tags:
        - moneypool invitations
      parameters:
        - name: Invite request parameters.
          in: body
          required: true
          schema:
            $ref: "#/definitions/InviteRequest"
      responses:
        "201":
          description: Invitation succesfully created.
          schema:
            $ref: "#/definitions/Invitation"
        "400":
          description: "Invalid parameters, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: Moneypool not found. Customer not found.
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: The position is already filled.
          schema:
            $ref: "#/definitions/Error"
  "/invitation/customer":
    get:
      summary: Get customer invitations.
      description: Return a list with all the invitations of the customer.
      operationId: getCustomerInvitations
      tags:
        - moneypool invitations
      responses:
        "200":
          description: Returns the invitation list. Returns empty list if there is none.
          schema:
            type: array
            items:
              $ref: "#/definitions/InvitationDetails"
  "/invitation/moneypool/{moneypoolId}":
    get:
      summary: Get moneypool invitations.
      description: Return a list with all the invitations of a moneypool.
      operationId: getMoneypoolInvitations
      tags:
        - moneypool invitations
      parameters:
        - name: moneypoolId
          in: path
          required: true
          type: BigInteger
          description: The moneypool identifier.
      responses:
        "200":
          description: "Returns the invitation list. Returns empty list if there is none."
          schema:
            type: array
            items:
              $ref: "#/definitions/InvitationDetails"
        "400":
          description: "Invalid moneypool identifier format, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
  "/invitation/{id}/accept":
    put:
      summary: Accept invitation.
      description: Accept an invitation.
      operationId: acceptInvitation
      tags:
        - moneypool invitations
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The invitation identifier.
      responses:
        "200":
          description: "Invitation successfully accepted."
          schema:
            $ref: "#/definitions/Invitation"
        "400":
          description: "Invalid invitation identifier format, response contains detailed error. The provided id does not belong to an invitation."
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Invitation not found."
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "The invitation is not pending so it can not be updated."
          schema:
            $ref: "#/definitions/Error"
  "/invitation/{id}/decline":
    put:
      summary: Decline an invitation.
      description: Decline an invitation given its identifier.
      operationId: declineInvitation
      tags:
        - moneypool invitations
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The invitation identifier.
      responses:
        "200":
          description: "Invitation successfully declined."
          schema:
            $ref: "#/definitions/Invitation"
        "400":
          description: "Invalid invitation identifier format, response contains detailed error. The provided id does not belong to an invitation."
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Invitation not found"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "The invitation is not pending so it can not be updated."
          schema:
            $ref: "#/definitions/Error"
  "/requestToJoin":
    post:
      summary: Create a joining request.
      description: Create a request to join a moneypool.
      operationId: joiningRequest
      tags:
        - moneypool joining request
      parameters:
        - name: Joining request parameters.
          in: body
          required: true
          schema:
            $ref: "#/definitions/JoinRequest"
      responses:
        "201":
          description: "Joining Request succesfully created."
          schema:
            $ref: "#/definitions/JoiningRequest"
        "400":
          description: "Invalid parameters, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Moneypool not found."
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: The position is already filled.
          schema:
            $ref: "#/definitions/Error"
  "/requestToJoin/customer":
    get:
      summary: Get customer joining requests.
      description: Return a list with all the joining requests of the customer.
      operationId: getCustomerJoiningRequest
      tags:
        - moneypool joining request
      responses:
        "200":
          description: "Returns the joining requests list. Returns empty list if there is none."
          schema:
            type: array
            items:
              $ref: "#/definitions/JoiningRequestDetails"
  "/requestToJoin/moneypool/{moneypoolId}":
    get:
      summary: Get moneypool joining requests
      description: Return a list with all the joining requests of a moneypool.
      operationId: getMoneypoolJoiningRequest
      tags:
        - moneypool joining request
      parameters:
        - name: moneypoolId
          in: path
          required: true
          type: BigInteger
          description: The moneypool identifier.
      responses:
        "200":
          description: "Returns the joining requests list. Returns empty list if there is none."
          schema:
            type: array
            items:
              $ref: "#/definitions/JoiningRequestDetails"
        "400":
          description: "Invalid moneypool identifier format, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
  "/requestToJoin/{id}/accept":
    put:
      summary: Accept a joining request.
      description: Accept a joining request.
      operationId: acceptJoiningRequest
      tags:
        - moneypool joining request
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The joining request identifier.
      responses:
        "200":
          description: "Joining request successfully accepted."
          schema:
            $ref: "#/definitions/JoiningRequest"
        "400":
          description: "Invalid joining request identifier format, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
  "/requestToJoin/{id}/decline":
    put:
      summary: Decline a joining request
      description: Decline a the joining request.
      operationId: declineJoiningRequest
      tags:
        - moneypool joining request
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The joining request identifier.
      responses:
        "200":
          description: "Joining request successfully declined."
          schema:
            $ref: "#/definitions/JoiningRequest"
        "400":
          description: "Invalid joining request identifier format, response contains detailed error. The provided identifier does not belong to a joining request."
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Joining request not found."
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "The joining request is not pending, so it can not be updated."
          schema:
            $ref: "#/definitions/Error"
  "/customer/notification/{id}/ack":
    post:
      tags:
        - notifications
      summary: Acknowledge an existent notification
      operationId: ackNotification
      description: |
        Marks an notification as acknowledged, so it will not be returned anymore in the `GET /notification` method.
      parameters:
        - name: id
          in: path
          description: The id of the notification to be acked
          type: string
          required: true
      responses:
        "204":
          description: "Success, notification is acknowledged"
        "404":
          description: "Not Found, the notification identified by id does not exists"
  "/customer/notification":
    get:
      tags:
        - notifications
      summary: Get all non acknowledged notifications
      operationId: getNotifications
      description: |
        Returns all notifications that are not yet acknowledged. 

        The `notificationInfo` type is variable depending on the notification `type` raised, so the consumer should allow for dynamic types on this attributes. 

        ### Available Events

        * NotificationMessage. For this type --> `notificationInfo` is a dynamic **Map<String, Object>.**

        **Note that when an event is acknowledged, it will no longer be available for consume through this method**
      produces:
        - application/json
      responses:
        "200":
          description: "Success, all non acknowledged notifications are retuned"
          schema:
            type: array
            items:
              $ref: "#/definitions/NotificationEvent"
  "/payment":
    post:
      tags:
        - payments
      summary: Make a payment.
      operationId: makePayment
      description:
        Make a payment to a moneypool member
      produces:
        - application/json
      parameters:
        - name: Make a payment request parameters.
          in: body
          required: true
          schema:
            $ref: "#/definitions/MakePaymentRequest"
      responses:
        "201":
          description: "Payment succesfully created."
          schema:
            type: string
            example: TC1321
        "400":
          description: "Invalid parameters, response contains detailed error."
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: Forbidden. You don't have permissions to make this operation.
          schema:
            $ref: "#/definitions/Error"
definitions:
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: String
        description: The error code. This error code should define the error type returned.
        example: MP-0003
      message:
        type: String
        description: The error description. A message that resume the error thrown by the system.
        example: Community not found for this moneypool.
  Country:
    type: object
    required:
      - id
      - name
      - isoCode3
    properties:
      id:
        description: Alphanumeric iso code (2-letters) of the country..
        type: BigInteger
        example: US
      name:
        description: Name of the country
        type: String
        example: United States Of America
      isoCode3:
        description: Alphanumeric iso code (3-letters) of the country.
        type: String
        example: USA
  City:
    type: object
    required:
      - id
      - name
      - nameAscii
    properties:
      id:
        description: Id of the city.
        type: BigInteger
        example: 12341234
      name:
        description: Name of the city (locale based). Will return non-ascii characters for those cities that are originally written using non-latin alphabet.
        type: String
        example: London
      nameAscii:
        description: "Name of the city (using ascii characters, for english readers)."
        type: String
        example: London
  State:
    type: object
    required:
      - id
      - name
      - nameAscii
      - code
    properties:
      id:
        description: Id of the state.
        type: BigInteger
        example: 6269131
      name:
        description: Name of the state (locale based). Will return non-ascii characters for those states that are originally written using non-latin alphabet.
        type: String
        example: England
      nameAscii:
        description: "Name of the state (using ascii characters, for english readers)."
        type: String
        example: England
      code:
        description: Code of the state.
        type: String
        example: ENG
  Currency:
    type: object
    required:
      - id
      - name
    properties:
      id:
        description: Numeric iso of the currency.
        type: BigInteger
        example: USD
      name:
        description: Currency name
        type: String
        example: Us Dollar
  PaymentMethod:
    type: object
    required:
      - type
      - description
    properties:
      type:
        description: The payment method type.
        type: String
        example: CASH
      description:
        description: The payment method description.
        type: String
        example: Cash payment
  PartnerConfiguration:
    type: object
    required:
      - name
      - currency
      - country
      - lowerLimit
      - upperLimit
      - minMembers
      - maxMembers
      - decimalAllowed
      - numberOfDecimals
      - paymentMethods
    properties:
      name:
        description: The partner name.
        type: String
        example: Test partner
      currency:
        description: The partner configured currency. There will be only one currency configured for each partner.
        type: String
        example: USD
      country:
        description: The partner configured country. There will be only one country configured for each partner.
        type: String
        example: ES
      lowerLimit:
        description: The minimum value that the amountToSave field can take when creating a moneypool.
        type: BigInteger
        example: 300
      upperLimit:
        description: The maximum value that the amountToSave field can take when creating a moneypool.
        type: BigInteger
        example: 3000
      minMembers:
        description: The minimum number of members for whom a moneypool can be created.
        type: String
        example: 5
      maxMembers:
        description: The maximum number of members for whom a moneypool can be created.
        type: String
        example: 15
      decimalAllowed:
        description: Indicate whether decimal numbers are allowed in the system or not.
        type: Boolean
        example: true
      numberOfDecimals:
        description: The number of decimal allowed in case they are. If decimals are not allowed this value will be 0.
        type: Integer
        example: 2
      paymentMethods:
        description: The different payment methods configured for this partner.
        type: array
        items:
          $ref: "#/definitions/PaymentMethod"
  SaveCustomerRequest:
    type: object
    required:
      - name
      - lastname
      - birthDate
      - mobileNumber
      - email
      - status
      - kycStatus
    properties:
      customerId:
        description: customer identifier. It is only required to update the customer information.
        type: BigInteger
        example: 11
      code:
        description: Customer code.
        type: String
        example: CU123
      name:
        description: Customer name.
        type: String
        example: Ben
      lastname:
        description: Customer last name.
        type: String
        example: Simmons
      nickname:
        description: Customer nickname.
        type: LocalDate
        example: BSimmy
      birthDate:
        description: Customer birthdate.
        type: LocalDate
        example: "2021-05-23"
      mobileNumber:
        description: Customer mobile number.
        type: String
        example: +34666666666
      email:
        description: Customer email.
        type: String
        example: ben.simmons@test.com
      status:
        description: Customer status.
        type: String
        example: ACTIVE
      kycStatus:
        description: Customer KYC status.
        type: String
        example: PENDING
      profilePicture:
        description: Profile picture url.
        type: String
        example: 413213213123131231231@amazon.ecs.bucket-s3
      referralInvitationCode:
        description: Referral invitation code of the customer who invited you.
        type: String
        example: FL8935V
      address:
        description: Customer address.
        $ref: "#/definitions/Address"
  Customer:
    type: object
    properties:
      customerId:
        description: customer identifier. It is only required to update the customer information.
        type: BigInteger
        example: 11
      code:
        description: Customer code.
        type: String
        example: CU123
      name:
        description: Customer name.
        type: String
        example: Ben
      lastname:
        description: Customer last name.
        type: String
        example: Simmons
      nickname:
        description: Customer nickname.
        type: LocalDate
        example: BSimmy
      birthDate:
        description: Customer birthdate.
        type: LocalDate
        example: "2021-05-23"
      mobileNumber:
        description: Customer mobile number.
        type: String
        example: +34666666666
      referralCode:
        description: Customer referral code to invite new users.
        type: String
        example: BS8321F
      referralInvitationCode:
        description: Referral invitation code of the customer who invited you.
        type: String
        example: FL8935V
      email:
        description: Customer email.
        type: String
        example: ben.simmons@test.com
      status:
        description: Customer status.
        type: String
        example: ACTIVE
      kycStatus:
        description: Customer KYC status.
        type: String
        example: PENDING
      address:
        description: Customer address.
        $ref: "#/definitions/Address"
  CustomerProfileInformation:
    type: object
    properties:
      customerId:
        description: The customer identifier.
        type: BigInteger
        example: 11
      name:
        description: Customer name.
        type: String
        example: Ben
      lastname:
        description: Customer last name.
        type: String
        example: Simmons
      birthDate:
        description: Customer birthdate.
        type: LocalDate
        example: "2021-05-23"
      mobileNumber:
        description: Customer mobile number.
        type: String
        example: +34666666666
      referralCode:
        description: Customer referral code to invite new users.
        type: String
        example: BS8321F
      email:
        description: Customer email.
        type: String
        example: ben.simmons@test.com
      avatarUrls:
        description: The profile picture urls for different image sizes.
        $ref: "#/definitions/AvatarUrl"    
      rating:
        description: Customer rating. It may take values from 0.0 to 5.0.
        type: Double
        example: 2.62  
      address:
        description: Customer address.
        $ref: "#/definitions/Address"      
  SearchCustomerRequest:
    type: object
    properties:
      name:
        description: Customer name.
        type: String
        example: "Ben"
      lastname:
        description: Customer lastname.
        type: String
        example: "Simmons"
      birthDate:
        description: Customer birthDate.
        type: LocalDate
        example: "2021-04-24"
      mobileNumber:
        description: Customer phone number.
        type: String
        example: +34666453433
      email:
        description: Customer email.
        type: String
        example: ben@simmons.test
      status:
        description: Customer status.
        type: String
        example: ACTIVE
      kycStatus:
        description: Customer KYC status.
        type: String
        example: ACTIVE
  SearchCustomerResponse:
    type: object
    properties:
      customers:
        description: Customers list.
        type: array
        items:
          $ref: "#/definitions/Customer"
  SaveMoneypoolRequest:
    type: object
    required:
      - name
      - poolCode
      - startDate
      - nextPaymentDate
      - type
      - amountToSave
      - currency
      - membersRequired
      - paymentsFrequency
      - purpose
    properties:
      id:
        description: Moneypool id. It is only required to update a moneypool.
        type: BigInteger
        example: 1123
      name:
        description: Moneypool name.
        type: String
        example: Test moneypool
      poolCode:
        description: Moneypool code.
        type: String
        example: MP1
      startDate:
        description: Moneypool start date.
        type: LocalDate
        example: "2021-04-23"
      type:
        description: Moneypool type (PUBLIC / PRIVATE).
        type: String
        example: PUBLIC
      amountToSave:
        description: Amount which every Moneypool component will receive in his collect turn.
        type: BigDecimal
        example: 1000
      currency:
        description: Moneypool currency.
        type: String
        example: USD
      membersRequired:
        description: Number of Members required.
        type: Integer
        example: 8
      paymentsFrequency:
        description: Frequency of the payments (MONTHLY / BIMONTHLY / BIWEEKLY).
        type: String
        example: MONTHLY
      purpose:
        description: Purpose of the moneypool.
        type: String
        example: BUY TV
  SearchMoneypoolRequest:
    type: object
    required:
      - startDateFrom
      - startDateTo
      - poolCode
    properties:
      name:
        description: Moneypool name.
        type: String
        example: "2021-04-23"
      startDateFrom:
        description: The date from where Moneypool start dates begin.
        type: LocalDate
        example: "2021-04-23"
      startDateTo:
        description: The date where Moneypool start dates end.
        type: LocalDate
        example: "2021-04-24"
      type:
        description: Moneypool type (PUBLIC / PRIVATE).
        type: String
        example: PUBLIC
      poolCode:
        description: Moneypool code.
        type: String
        example: MP1
      status:
        description: Status of the Moneypool.
        type: String
        example: OPENED
      amountToSave:
        description: Amount which every Moneypool component will receive in his collect turn.
        type: BigDecimal
        example: 1000
      currency:
        description: Moneypool currency.
        type: String
        example: USD
      membersRequired:
        description: Number of Members required.
        type: Integer
        example: 8
      paymentsFrequency:
        description: Frequency of the payments (MONTHLY / BIMONTHLY / BIWEEKLY).
        type: String
        example: MONTHLY
  CustomerMoneypool:
    type: object
    required:
      - moneypoolId
      - moneypoolName
      - hostName
      - moneypoolStatus
      - isHost
      - customerStatus
      - joinedDate
      - positions
    properties:
      moneypoolId:
        description: Moneypool id.
        type: BigInteger
        example: 571418
      moneypoolName:
        description: Moneypool name.
        type: String
        example: Helping Hearts
      hostName:
        description: Host name.
        type: String
        example: John Simmons
      moneypoolStatus:
        description: Moneypool status.
        type: String
        example: OPENED
      isHost:
        description: Specifies if the customer is the host of this moneypool.
        type: Boolean
        example: 1000
      customerStatus:
        description: The status of the customer in this moneypool.
        type: String
        example: ACTIVE
      joinedDate:
        description: The date the customer joined the moneypool.
        type: LocalDate
        example: "2021-04-23"
      positions:
        description: The customer positions in this moneypool.
        type: array
        example: [2, 4]
  Moneypool:
    type: object
    required:
      - id
      - name
      - hostName
      - poolCode
      - hostId
      - amountToSave
      - currency
      - membersRequired
      - startDate
      - type
      - status
      - purpose
      - currentMembers
      - rating
    properties:
      id:
        description: Moneypool id.
        type: BigInteger
        example: 571418
      name:
        description: Moneypool name.
        type: String
        example: Helping Hearts
      hostName:
        description: Host name.
        type: String
        example: John Simmons
      poolCode:
        description: Moneypool code.
        type: String
        example: MP1
      amountToSave:
        description: Amount which every Moneypool component will receive in his collect turn.
        type: BigDecimal
        example: 1000
      currency:
        description: Moneypool currency.
        type: String
        example: USD
      currentMembers:
        description: Number of Members at this moment in the moneypool.
        type: Integer
        example: 6
      membersRequired:
        description: Number of Members required.
        type: Integer
        example: 8
      startDate:
        description: Moneypool start date.
        type: LocalDate
        example: "2021-04-23"
      type:
        description: Moneypool type (PUBLIC / PRIVATE).
        type: String
        example: PUBLIC
      status:
        description: Status of the Moneypool (OPENED / CANCELLED / LOCKED / STARTED / FINISHED).
        type: String
        example: OPENED
      rating:
        description: The moneypool rating. It is obtained from the rating of its members and it may take values from 0.0 to 5.0.
        type: Double
        example: 3.7
      purpose:
        description: Purpose of the moneypool.
        type: String
        example: BUY TV
  MoneypoolDetail:
    type: object
    required:
      - id
      - name
      - poolCode
      - amountToSave
      - currency
      - membersRequired
      - paymentCycle
      - paymentCyclesTotal
      - paymentsFrequency
      - startDate
      - type
      - status
      - purpose
      - rating
      - currentBalance
      - members
      - paymentsCalendar
    properties:
      id:
        description: Moneypool id.
        type: BigInteger
        example: 571418
      name:
        description: Moneypool name.
        type: String
        example: Test moneypool
      poolCode:
        description: Moneypool code.
        type: String
        example: MP1
      amountToSave:
        description: Amount which every Moneypool component will receive in his collect turn.
        type: BigDecimal
        example: 1000
      currency:
        description: Moneypool currency.
        type: String
        example: USD
      membersRequired:
        description: Number of Members required.
        type: Integer
        example: 8
      paymentCycle:
        description: Number of payment cicle.
        type: Integer
        example: 8
      paymentCyclesTotal:
        description: Number of payment cicle total.
        type: Integer
        example: 8
      paymentsFrequency:
        description: Frequency of the payments (MONTHLY / BIMONTHLY / BIWEEKLY).
        type: String
        example: MONTHLY
      startDate:
        description: Moneypool start date.
        type: LocalDate
        example: "2021-04-23"
      type:
        description: Moneypool type (PUBLIC / PRIVATE).
        type: String
        example: PUBLIC
      status:
        description: Status of the Moneypool.
        type: String
        example: OPENED
      purpose:
        description: Purpose of the moneypool.
        type: String
        example: BUY TV
      rating:
        description: The moneypool rating. It is obtained from the rating of its members and it may take values from 0.0 to 5.0.
        type: Double
        example: 2.77  
      currentBalance:
        description: Current balance.
        type: BigDecimal
        example: "500"
      moneypoolView:
        description: The moneypool view based on the logged user that request the information. Possible values are HOST, MEMBER or CUSTOMER
        type: String
        example: HOST
      members:
        description: The members of the moneypool.
        type: array
        items:
          $ref: "#/definitions/Member"
      paymentsCalendar:
        description: The members of the moneypool.
        type: array
        items:
          $ref: "#/definitions/MoneypoolCalendar"
  MoneypoolCalendar:
    type: object
    required:
      - position
      - date
      - status
    properties:
      position:
        description: Position in the moneypool.
        type: Integer
        example: 2
      date:
        description: The payment date. If the payment is already been done, this field will represent the date in which the payment was executed.
        type: LocalDate
        example: "2021-04-23"
      status:
        description: The status of the calendar entry for this position. It could be PAID or PENDING.
        type: String
        example: "PENDING"  
  Amount:
    description: The amount and currency of the operation.
    type: object
    required:
      - ccy
      - value
    properties:
      ccy:
        description: Currency.
        type: String
        example: EUR
      value:
        description: Amount.
        type: BigDecimal
        example: 300.56
  Movement:
    type: object
    required:
      - id
      - amount
      - type
      - concept
      - createdDate
    properties:
      id:
        description: Movement id.
        type: BigInteger
        example: 571418
      amount:
        $ref: "#/definitions/Amount"
      type:
        description: Movement type.
        type: String
        example: CREDIT
      concept:
        description: Movement concept.
        type: String
        example: Credit in moneypool 2
      transactionId:
        description: The transaction id related with the movement.
        type: String
        example: 12
      createdDate:
        description: Movement creation daate.
        type: LocalDateTime
        example: "2021-04-23T00:00:00+02:00"
  GetMovementRequest:
    type: object
    properties:
      type:
        description: The movement type.
        type: String
        example: DEBIT
      amountFrom:
        description: Search movement with an amount bigger than this value.
        type: BigInteger
        example: 100
      amountTo:
        description: Search movement with an amount lower than this value.
        type: BigInteger
        example: 400
      dateFrom:
        description: Search movements created after this date.
        type: LocalDateTime
        example: "2021-04-23"
      dateTo:
        description: Search movements created before this date.
        type: LocalDateTime
        example: "2022-12-23"
  GetMovementResponse:
    type: object
    required:
      - movements
    properties:
      pageNumber:
        description: The current page number.
        type: Integer
        example: 0
      totalSize:
        description: The total number of movements found.
        type: Integer
        example: 10
      totalPages:
        description: The total pages returned.
        type: Integer
        example: 1
      movements:
        description: List of movement
        type: array
        items:
          $ref: "#/definitions/Movement"
  Member:
    type: object
    properties:
      id:
        description: Member id.
        type: BigInteger
        example: 571418
      customerId:
        description: Customer id.
        type: BigInteger
        example: 571423
      name:
        description: Customer name.
        type: String
        example: "Maikel"
      lastName:
        description: Customer lastName.
        type: BigInteger
        example: "Smith"
      phoneNumber:
        description: Customer phone number.
        type: String
        example: "+34666323211"  
      status:
        description: Member status.
        type: String
        example: ACTIVE
      host:
        description: Flag which determines if the member is the host of the moneypool.
        type: Boolean
        example: false
      joinedDate:
        description: Joined date.
        type: LocalDateTime
        example: "2021-04-23T00:00:00+02:00"
      avatarUrls:
        description: The profile picture urls for different image sizes.
        $ref: "#/definitions/AvatarUrl"    
      rating:
        description: Member rating. It may take values from 0.0 to 5.0.
        type: Double
        example: 1.65
      positions:
        description: List of position
        type: array
        items:
          $ref: "#/definitions/MemberPosition"
  MemberPosition:
    type: object
    required:
      - position
      - status
      - positions
      - status
    properties:
      position:
        description: Position.
        type: Integer
        example: 1
      status:
        description: Member status.
        type: String
        example: ACTIVE
  Address:
    type: object
    properties:
      address1:
        description: Address first line (street).
        type: Integer
        example: Elm Street, 13
      address2:
        description: Address second line (House number, floor...etc.).
        type: String
        example: Second floor, door C
      city:
        description: City.
        type: String
        example: Madrid
      state:
        description: State.
        type: String
        example: Madrid
      country:
        description: Country.
        type: String
        example: ES
      zipCode:
        description: Postal code.
        type: String
        example: 1232F
  AddMemberRequest:
    type: object
    required:
      - customerId
      - position
    properties:
      customerId:
        description: The identifier of the customer we want to add to the pool.
        type: BigInteger
        example: 571418
      position:
        description: Position the member will take in the moneypool.
        type: BigInteger
        example: 5
  AvatarUrl:
    type: object
    properties:
      large:
        description: The largest image size url.
        type: String
        example: https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48
      medium:
        description: The medium image size url.
        type: String
        example: https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24
      small:
        description: The smallest image size url.
        type: String
        example: https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16 
  InviteRequest:
    type: object
    required:
      - moneypoolId
      - customerId
      - position
    properties:
      moneypoolId:
        description: The identifier of the moneypool the customer will be invited to.
        type: BigInteger
        example: 123
      customerId:
        description: The identifier of the customer we want to invite.
        type: BigInteger
        example: 222
      position:
        description: Position the customer will take in the moneypool.
        type: Integer
        example: 5
  JoinRequest:
    type: object
    required:
      - moneypoolId
      - position
    properties:
      moneypoolId:
        description: The id of the moneypool the customer is requesting to join.
        type: BigInteger
        example: 123
      position:
        description: Position the customer will take in the moneypool.
        type: Integer
        example: 5
  Invitation:
    type: object
    required:
      - id
      - moneypoolId
      - customerId
      - position
      - status
      - expirationDate
    properties:
      id:
        description: The invitation identifier.
        type: BigInteger
        example: 11
      moneypoolId:
        description: The moneypool identifier the customer is invited to.
        type: BigInteger
        example: 123
      customerId:
        description: The invited customer identifier.
        type: BigInteger
        example: 222
      position:
        description: The position of the customer.
        type: Integer
        example: 5
      status:
        description: The invitation status.
        type: String
        example: "PENDING"
      expirationDate:
        description: The invitation expiration date.
        type: LocalDateTime
        example: "2021-04-23T00:00:00+02:00"
  JoiningRequest:
    type: object
    required:
      - id
      - moneypoolId
      - customerId
      - position
      - status
      - expirationDate
    properties:
      id:
        description: The joining request identifier.
        type: BigInteger
        example: 14
      moneypoolId:
        description: The moneypool identifier the customer is requesting to join.
        type: BigInteger
        example: 123
      customerId:
        description: The customer who request to join identifier.
        type: BigInteger
        example: 222
      position:
        description: The position of the customer.
        type: Integer
        example: 5
      status:
        description: The joining request status.
        type: String
        example: "PENDING"
      expirationDate:
        description: The joining request expiration date.
        type: LocalDateTime
        example: "2021-04-23T00:00:00+02:00"
  InvitationDetails:
    type: object
    required:
      - id
      - moneypoolId
      - moneypoolName
      - hostName
      - amountToSave
      - moneypoolRating
      - customerId
      - position
      - status
      - expirationDate
    properties:
      id:
        description: The invitation identifier.
        type: BigInteger
        example: 11
      moneypoolId:
        description: The moneypool identifier the customer is invited to.
        type: BigInteger
        example: 123
      moneypoolName:
        description: The moneypool name.
        type: String
        example: Helping Hearts
      hostName:
        description: The moneypool host name.
        type: String
        example: Pep Mancini
      amountToSave:
        description: The moneypool amount to save.
        type: Integer
        example: 4000
      moneypoolRating:
        description: The moneypool rating. It is obtained from the rating of its members and it may take values from 0.0 to 5.0.
        type: Double
        example: 3.9
      customerId:
        description: The invited customer identifier.
        type: BigInteger
        example: 222
      position:
        description: The position of the customer.
        type: Integer
        example: 5
      status:
        description: The invitation status.
        type: String
        example: "PENDING"
      expirationDate:
        description: The invitation expiration date.
        type: LocalDateTime
        example: "2021-04-23T00:00:00+02:00"
  JoiningRequestDetails:
    type: object
    required:
      - id
      - moneypoolId
      - moneypoolName
      - hostName
      - customerName
      - amountToSave
      - customerRating
      - customerId
      - position
      - status
      - expirationDate
    properties:
      id:
        description: The invitation identifier.
        type: BigInteger
        example: 11
      moneypoolId:
        description: The moneypool identifier the customer is requesting to join.
        type: BigInteger
        example: 123
      moneypoolName:
        description: The moneypool name.
        type: String
        example: Helping Hearts
      position:
        description: The position of the customer.
        type: Integer
        example: 5
      status:
        description: The joining request status.
        type: String
        example: "PENDING"
      expirationDate:
        description: The joining request expiration date.
        type: LocalDateTime
        example: "2021-04-23T00:00:00+02:00"  
      hostName:
        description: The moneypool host name.
        type: String
        example: Ben Benji
      amountToSave:
        description: The moneypool amount to save.
        type: Integer
        example: 4000
      customerId:
        description: The invited customer identifier.
        type: BigInteger
        example: 222
      customerName:
        description: The name of the customer who made the request.
        type: String
        example: Jack Sparrow  
      customerRating:
        description: The customer rating. It is obtained from the rating of its members and it may take values from 0.0 to 5.0.
        type: Double
        example: 1.9
      avatarUrls:
        description: The profile picture urls for different image sizes.
        $ref: "#/definitions/AvatarUrl"     
  NotificationEvent:
    properties:
      id:
        type: string
        example: 3664893e-e13a-4937-b93c-c489a9400daa
      owner:
        type: string
        example: "hagbad://customer/2" 
      type:
        type: string
        example: An event type
      updatedDate:
        type: date
        example: "2018-01-10T02:07:26Z"
      notificationInfo:
        type: object
  StartRegistrationRequest:
    type: object
    properties:
      phoneNumber:
        type: string
        description: The customer's phone number
        example: "+34643124321"
      birthdate:
        type: date
        description: The customer's date of birth.
        example: "1986-01-01"
      referralCode:
        type: string
        description: A referral code provided by other hagbad's customer
        example: SANQ123
  StartRegistrationResponse:
    type: object
    properties:
      registrationKey:
        type: string
        description: The registration id generated. It will be used in next steps
        example: 3664893e-e13a-4237-b95c-c489a9400da2
  VerifyRegistrationRequest:
    type: object
    properties:
      registrationKey:
        type: string
        description: The registration id generated in the first step.
        example: 3664893e-e13a-4237-b95c-c489a9400da2
      verificationCode:
        type: string
        description: The OTP sent to the provided phone number
        example: 123456
  VerifyRegistrationResponse:
    type: object
    properties:
      foundCustomer:
        description: If the customer already exist in the remmitance system, its information is going returned here.
        type: object
        properties:
          code:
            type: string
            description: The customer's code provided by the remmitance system
            example: C01
          firstName:
            type: string
            example: Aureliano
          lastName:
            type: string
            example: Buendia
          email:
            type: string
            example: lorem@ipsum.com
          birthdate:
            type: date
            example: "1986-01-01"
  CompleteRegistrationRequest:
    type: object
    properties:
      registrationKey:
        type: string
        description: The registration id generated in the first step.
        example: 3664893e-e13a-4237-b95c-c489a9400da2
      password:
        type: string
        description: The customer's selected password
      code:
        type: string
        description: The customer's code provided by the remmitance system
        example: C01
      firstName:
        type: string
        example: Aureliano
      lastName:
        type: string
        example: Buendia
      email:
        type: string
        example: lorem@ipsum.com
      birthdate:
        type: date
        example: "1986-01-01"
  UserPasswordRecoveryRequest:
    type: object
    required:
    - email
    properties:
      email:
        type: string,
        description: "The user's email"
        example: test@test.com
  UserPasswordChangeRequest:
    type: object
    required:
    - newPassword
    properties:
      newPassword:
        type: string,
        description: "The user's new password"
        example: "Y0ur4w3s0m3P4ssw0rd$"
  MakePaymentRequest:
    type: object
    required:
      - moneypoolId
      - destinationCustomerId
      - position
      - amount
    properties:
      moneypoolId:
        description: The moneypool identifier.
        type: BigInteger
        example: 1123
      destinationCustomerId:
        description: The identifier of the customer who will recieve the payment.
        type: BigInteger
        example: 11
      position:
        description: The position that the customer occupies in the moneypool.
        type: Integer
        example: 2  
      amount:
        $ref: "#/definitions/Amount"  

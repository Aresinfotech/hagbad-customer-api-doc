swagger: '2.0'
schemes:
  - https
info:
  version: 1.0.0
  title: Hagbad Online REST API
  contact:
    email: 'developers@greysystems.eu'         
    url: 'http://www.greysystems.eu/#contact'
  license:
    name: All Rights reserved GreySystems 2021
    url: 'http://www.greysystems.eu'
  termsOfService: 'https://www.greysystems.eu'
  x-logo:
    url: 'http://www.greysystems.eu/wp-content/uploads/2017/07/logo-Grey-menu.png'
    background: '#FFFFFF'
  description: |
    # Introduction

    The Hagbad REST API is a RESTFul API built on HTTP. It provides the following features:
    - Predictable resource URLs. 
    - Accepts and returns JSON in the HTTP body. 
    - Returns HTTP response codes to indicate errors. 
    - You can use your favorite HTTP/REST library for your programming language to use Hagbad’s APIs.

    # Who we are? 

    Grey Systems is a well established European IT Consulting company that specialises in working with financial institutions.
    During the last years, we have developed "Hagbad Platform", a next level technology platform to provide online multichannel MoneyPool services to Payment Institutions, MSB, Banks, etc.

    # Goal 

    The goal of this technical documentation is providing to Front-End developers (Mobile, Web, …) the specifications to connect to Hagbad System Platform though the APIs exposed in its gateway.
    This means that the API is intended to by used directly by the Front End, so all the operations assume that a customer is logged in the system, and will provide information based on that assumption.


    # Authentication


    ## The identity endpoint
    Several resources exposed by this gateway are secured, and you will need a [json web token](https://jwt.io/) to reach the secured methods.

    The main way to get this jwt should be the Oauth2 flow method called `Authorization Code`. The Oauth2 flow has become the web security standard in the internet services.
    You can get more information about Oauth2 framework here:
    https://datatracker.ietf.org/doc/html/rfc6749

    You can use our Hagbad identity manager that follows the oauth2 standard. All the requests made against `/auth` endpoint will be automatically redirected to the Hagbad identity manager. This identity manager knows every configured partner in the Hagbad system and is capable of authenticating and registering users using the partner system's own configuration.

    The related project that builds and configures the Hagbad identity manager is: https://gitlab.com/grey-systems/hagbad/hagbad-identity. (Please, note that you will need an authorized user to see this repository)

    Now, let's see the allowed methods exposed under the `/auth` path:

    ### Well known endpoint
    The well known endpoint provides you all the Oauth2 configuration that you ought to know to build the oauth flow in your application.
    This endpoint returns, among other information, where the authorization or token endpoint is published. Also describe the allowed scopes and the public key made by the identity manager.

    Let's see an example request using the develop environment gateway.

    `GET http://localhost:8080/auth/realms/aqil/.well-known/openid-configuration`

    ### Obtaining the Authorization Code
    Once you know how to configure the oauth flow, you can get the authorization code to start the user authentication.

    As we can see in the official documentation described above: 

    >The authorization code is obtained by using an authorization server
    as an intermediary between the client and resource owner.  Instead of
    requesting authorization directly from the resource owner, the client
    directs the resource owner to an authorization server (via its
    user-agent as defined in [RFC2616]), which in turn directs the
    resource owner back to the client with the authorization code.

    You will need an internet browser to start the get Authorization Code flow. The browser is required because the identity manager
    will redirect the authorization request to the proper partner (currently, one test partner built using oauth0 application). The 
    partner will request you the user and password and validate them. If the authorization is success, the identity
    manager will return to you (where the redirect_uri indicates) the authorization code that you will use
    to request the `access_token` via the token endpoint.

    Let's see an example (remember, this request will be launched inside the browser):

    ```json
    http://localhost:8080/auth/realms/aqil/protocol/openid-connect/auth?redirect_uri=http://localhost:8081&client_id=aqil-api-client&response_type=code&scope=openid
    ```
    Now, you should see the oauth2 auth form:

    ![oauth form](.images/authorizations/oauth2-auth-form.png)

    Login with an existent user and you will be redirected to the registration page if the user does not already exist in the system:
    ![partner registration page](.images/authorizations/aqil-registration-page.png)

    Type the required fields and click in the register button. Please, keep in mind that the authorization code will be returned to `http://localhost:8081` so, you will need to capture the response using the browser developer tools:

    ![authorization code intercepted](.images/authorizations/authorization-code-intercepted.png)

    Now, you can use the provided authorization code to get the `access_token`. You will send a POST request to the token endpoint:

    ```bash
    curl --request POST \
      --url http://localhost:8080/auth/realms/aqil/protocol/openid-connect/token \
      --header 'Content-Type: application/x-www-form-urlencoded' \
      --data grant_type=authorization_code \
      --data code=f3e31822-73d0-484c-91d4-7839ab72c75f.379adde7-0448-4764-ae99-cf0852755e5e.5fdbcc2d-44a0-45d0-9ac7-1c423f622f0f \
      --data client_id=aqil-api-client \
      --data client_secret=e33009fc-17a6-4549-8bd6-b1a82792444b \
      --data redirect_uri=http://localhost:8081
    ```

    Obtaining this response:

    ![access token](.images/authorizations/access_token.png)

    **Getting service access_token via HTTP graphical client**

    If you are using HTTP clients like Insomnia, you can integrate this authorization code as part as the request authentication. Getting the `access_token` in a pretty easy way. Just add the `Authorization Code` option in the authorization tab and rock and roll:

    ![Insomnia authorization](.images/authorizations/insomnia-authorization.png)

    ## Refreshing the access token
    The access tokens given by the identity manager have expiration time. If you `access token` is expired, you will refresh it using the token endpoint provides by the identity manager.

    In a similar way that you get the `access token` in the last step described in the previous point, you can refresh the token making a POST request to the token endpoint:

    ```bash
    curl --request POST \
      --url http://localhost:8080/auth/realms/aqil/protocol/openid-connect/token \
      --header 'Content-Type: application/x-www-form-urlencoded' \
      --data grant_type=refresh_token \
      --data refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJkZTNjYWU2NC0wMGQ3LTQ4NTEtYWQ2ZS1lMmQ3ZTZjN2ZhMmUifQ.eyJleHAiOjE2MzM5NjgyNjcsImlhdCI6MTYzMzk2NjQ2NywianRpIjoiY2U4OGQzNzAtNDkzYS00ZDJjLWE2MmItNjE3YjM5MDgwZTkyIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL2FxaWwiLCJhdWQiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvYXFpbCIsInN1YiI6IjRmMGU1M2FkLTY0ZjMtNGQ0ZS04MWQ2LWE0Yzk4NmZmNmMzZCIsInR5cCI6IlJlZnJlc2giLCJhenAiOiJhcWlsLWFwaS1jbGllbnQiLCJzZXNzaW9uX3N0YXRlIjoiMzc5YWRkZTctMDQ0OC00NzY0LWFlOTktY2YwODUyNzU1ZTVlIiwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsInNpZCI6IjM3OWFkZGU3LTA0NDgtNDc2NC1hZTk5LWNmMDg1Mjc1NWU1ZSJ9._EnQzlqqHSZNQYx5Va_ifcsN1LCL_DKMkmVluIgAxao \
      --data client_id=aqil-api-client \
      --data client_secret=e33009fc-17a6-4549-8bd6-b1a82792444b
    ```

    Please, note that in this POST request, the `grant_type` is `refresh_token` instead of `authorization_code`. 

    The refresh response is the same that you receive when get the `access_token` in the previous step. Using this mechanism, you can refresh the `access_token as time as you need.

    ## Getting the user info
    The identity manager provides the oauth2 endpoint `/userinfo`. You can use this endpoint to get the very basic user information saved in the identity manager. This method is not recommended getting the user info due to it contains only the public information about the user, ignoring more specific fields that maybe you need.

    To get the user info, simply use `GET http://localhost:8080/auth/realms/aqil/protocol/openid-connect/userinfo` giving the bearer token in the `Authorization` header. 

    Here is the response for the user registered above:

    ![user info](.images/authorizations/user-info.png)

    ## Logout the current user session
    Each time you get an `access_token`, you are creating a new session in the identity manager. If you want to logout the current session of the user, you just use the `/logout` endpoint provides by the identity manager.

    Use: `GET http://localhost:8080/auth/realms/aqil/protocol/openid-connect/logout` with the bearer token in the `Authorization` header to logout the related


    # Common HTTP Error Responses

    The HAGBAD Rest API uses the following common HTTP status codes to communicate general issues or errors to the clients: 

    * HTTP **400** (Invalid Request): The request provided is invalid (request is not well formed, a mandatory field is not provided, etc..). 
    * HTTP **404** (Not found): The searched item could not be found (the moneypool was not found, etc..). 
    * HTTP **409** (Conflict): There is a conflict when trying to execute the operation (status change not allowed, etc..). 
    * HTTP **500** (Internal Server Error): Some internal component has failed to process your request. Please notify about this error to GreySystems team. 
tags:
  - name: catalogs
    description: This section explains how to access different the catalogs availables in the system.
  - name: configuration
    description: This section details the available operations related to the partner configuration.
  - name: moneypools
    description: Manage moneypool operation.
  - name: invitations
    description: Manage moneypool invitations.
  - name: joining request
    description: Manage moneypool joining requests.
paths:
  '/catalog/country':
    get:
      tags:
        - catalogs
      summary: Get countries.
      description: Returns the entire list of countries.
      responses:
        '200':
          description: Returns the entire list of countries.
          schema:
            type: array
            items:
              $ref: '#/definitions/Country'
        '400':
          description: 'Invalid parameters, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
  '/catalog/country/{iso3}':
    get:
      tags:
        - catalogs
      summary: Get country by ISO-Alpha3 Code.
      description: Returns the country given its ISO-Alpha3 code.
      parameters:
        - name: iso3
          in: path
          required: true
          type: String
          description: ISO-Alpha3 Code.
      responses:
        '200':
          description: Returns the country details.
          schema:
            $ref: '#/definitions/Country'
        '400':
          description: 'Invalid parameters, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Country not found.
          schema:
            $ref: '#/definitions/Error'
  '/catalog/country/{iso3}/city':
    get:
      tags:
        - catalogs
      summary: Search cities by country and name.
      description: 'Returns a list of cities, filtering them by country and by the name passed by parameters. The name must contain at least three characters.'
      parameters:
        - name: iso3
          in: path
          required: true
          type: String
          description: ISO-Alpha3 Code.
        - name: name
          in: query
          required: true
          type: String
          description: 'City name, minimum length three characters.'
      responses:
        '200':
          description: Returns a list with the cities which match the filter.
          schema:
            type: array
            items:
              $ref: '#/definitions/City'
        '400':
          description: 'Invalid parameters, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Country or cities not found.
          schema:
            $ref: '#/definitions/Error'
  '/catalog/country/{iso3}/city/{cityId}':
    get:
      tags:
        - catalogs
      summary: Get city by ID.
      description: Returns a city given its identifier.
      parameters:
        - name: iso3
          in: path
          required: true
          type: String
          description:  ISO-Alpha3 Code.
        - name: cityId
          in: path
          required: true
          type: BigInteger
          description: City identifier.
      responses:
        '200':
          description: Returns the city given its identifier.
          schema:
            $ref: '#/definitions/City'
        '400':
          description: 'Invalid parameters, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Country or city not found.
          schema:
            $ref: '#/definitions/Error'
            
  '/catalog/country/{iso3}/state':
    get:
      tags:
        - catalogs
      summary: Search states by country and name.
      description: 'Returns a list of states, filtering them by country and by the name passed by parameters. The name is not mandatory, but if is informed it must contain at least three characters.'
      parameters:
        - name: iso3
          in: path
          required: true
          type: String
          description: ISO-Alpha3 Code.
        - name: name
          in: query
          required: false
          type: String
          description: 'State name, minimum length three characters. If this parameter is not informed, it will return all available states in the country.'
      responses:
        '200':
          description: Returns a list with the states.
          schema:
            type: array
            items:
              $ref: '#/definitions/State'
        '400':
          description: 'Invalid parameters, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Country or states not found.
          schema:
            $ref: '#/definitions/Error'
  '/catalog/country/{iso3}/state/{stateId}':
    get:
      tags:
        - catalogs
      summary: Get state by ID.
      description: Returns a state given its identifier.
      parameters:
        - name: iso3
          in: path
          required: true
          type: String
          description: ISO-Alpha3 Code.
        - name: stateId
          in: path
          required: true
          type: BigInteger
          description: State identifier
      responses:
        '200':
          description: Returns the state given its identifier.
          schema:
            $ref: '#/definitions/State'
        '400':
          description: 'Invalid parameters, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Country or state not found.
          schema:
            $ref: '#/definitions/Error'
  /catalog/currency:
    get:
      tags:
        - catalogs
      summary: Get currencies.
      description: Returns the entire list of currencies.
      responses:
        '200':
          description: Returns the entire list of currencies.
          schema:
            type: array
            items:
              $ref: '#/definitions/Currency'
        '400':
          description: 'Invalid parameters, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
  '/catalog/currency/{iso}':
    get:
      tags:
        - catalogs
      summary: Get currency by ISO code.
      description: Returns the currency by ISO code.
      parameters:
        - name: iso
          in: path
          required: true
          type: String
          description: ISO Code.
      responses:
        '200':
          description: Returns the currency details.
          schema:
            $ref: '#/definitions/Currency'
        '400':
          description: 'Invalid parameters, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Currency not found.
          schema:
            $ref: '#/definitions/Error'
  '/configuration':
    get:
      tags:
        - partner
      summary: Get Partner configuration.
      description: Return the partner configuration details.
      responses:
        '200':
          description: 'Return current partner configuration.'
          schema:
            $ref: '#/definitions/PartnerConfiguration'
        '404':
          description: Partner not found.
          schema:
            $ref: '#/definitions/Error'
  '/moneypool':
    post:
      summary: Create or update a moneypool.
      description: |
        The HostID field which is necessary to inform when creating a pool will be provided by the architecture.
        </br> </br> 
        This save service will cover the update functionality too. If the moneypool id field in the request body is informed it will be an update behaviour, if it isn’t a create one.   
      operationId: saveMoneypool
      parameters:
        - name: saveMoneypoolRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/SaveMoneypoolRequest'
      tags:
        - moneypools
      responses:
        '200':
          decription: Moneypool successfully updated.
          schema:
            $ref: '#/definitions/Moneypool'
        '201':
          description: Moneypool successfully created.
          schema:
            $ref: '#/definitions/Moneypool'
        '400':
          description: Invalid Request. message attribute of response contains detailed information about the issue.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: The moneypool to update could not be found. Edit a pool in which you aren’t the Host.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: 'Conflict :Update a  locked / started / finished pool'
          schema:
            $ref: '#/definitions/Error'
  '/moneypool/{id}':
    get:
      summary: Get a moneypool by its id.
      description: |
        Get all the information about a single moneypool.
      operationId: getMoneypool
      tags:
        - moneypools
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The id of the moneypool
      responses:
        '200':
          description: Returns a Moneypool and its details.
          schema:
            $ref: '#/definitions/MoneypoolWithBalance'
        '400':
          description: 'Invalid parameters, response contains detailed error'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Moneypool has not been found using the id provided as request parameter.
          schema:
            $ref: '#/definitions/Error'
  '/moneypool/search':
    post:
      summary: Search Moneypools.
      description: 'Search moneypools given some parameters. </br> </br> When filling the required params, if you inform the <strong>poolCode</strong> it isn’t necessary to inform the <strong>startDate</strong> fields and vice versa.'
      operationId: searchMoneypools
      tags:
        - moneypools
      parameters:
        - name: search request parameters.
          in: body
          required: true
          schema:
            $ref: '#/definitions/SearchMoneypoolRequest'
        - name: page
          in: query
          required: false
          type: Integer
          description: Page number.
        - name: elementsPerPage
          in: query
          required: false
          type: Integer
          description: Number of elements per page.
      responses:
        '200':
          description: Find one or more Moneypools matching with the search parameters. Not find any Moneypools matching with the search parameters (empty array).
          schema:
            type: array
            items:
              $ref: '#/definitions/Moneypool'
        '400':
          description: 'Invalid parameters, response contains detailed error'
          schema:
            $ref: '#/definitions/Error'
  '/moneypool/{id}/status/{status}':
    put:
      summary: Update MoneyPool status.
      description: Update the status of a given moneypool.
      operationId: updateMoneypoolStatus
      tags:
        - moneypools
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: Moneypool id.
        - name: status
          in: path
          required: true
          type: String
          description: Moneypool status.
      responses:
        '200':
          description: Moneypool successfully updated.
        '400':
          description: 'Invalid parameters, response contains detailed error'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: The moneypool to update could not be found. Edit a pool in which you aren’t the Host.
          schema:
            $ref: '#/definitions/Error'
  '/moneypool/{id}/movement/':
    get:
      summary: Get Moneypool movements.
      description: |
        Get the movements of a Moneypool.
      operationId: getMovementByMoneypoolId
      tags:
        - moneypools
      parameters:
        - name: communityId
          in: path
          required: true
          type: BigInteger
          description: The id of the moneypool
        - name: page
          in: query
          required: false
          type: Integer
          description: Page number.
        - name: elementsPerPage
          in: query
          required: false
          type: Integer
          description: Number of elements per page.
      responses:
        '200':
          description: Returns the balance movements of the given Moneypool. Returns an empty list if the money pool doesn’t have movements yet.
          schema:
            $ref: '#/definitions/GetMovementResponse'
        '400':
          description: 'Invalid parameters, response contains detailed error'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Moneypool has not been found using the id provided as request parameter.
          schema:
            $ref: '#/definitions/Error'
  '/moneypool/{id}/member':
    get:
      summary: Get Moneypool Members.
      description: |
        Get all members of the Moneypool community.
      operationId: getMemberByMoneypoolId
      tags:
        - moneypools
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The id of the moneypool
      responses:
        '200':
          description: Returns the members of the given Moneypool. Returns an empty list if the money pool doesn’t have members yet.
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
        '400':
          description: 'Invalid parameters, response contains detailed error'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Moneypool has not been found using the id provided as request parameter.
          schema:
            $ref: '#/definitions/Error' 
  '/moneypool/{id}/member/{memberId}':
    put:
      summary: Expel Member from Moneypool.
      description: |
        Expel a member from a moneypool.
      operationId: expelMember
      tags:
        - moneypools
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The id of the moneypool
        - name: memberId
          in: path
          required: true
          type: BigInteger
          description: The id of the member we want to be expelled from the moneypool.
      responses:
        '200':
          description: Member successfully expelled from the moneypool.
        '400':
          description: 'Invalid parameters, response contains detailed error'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Moneypool has not been found using the id provided as request parameter. Member has not been found using the id provided as request parameter.
          schema:
            $ref: '#/definitions/Error'
  '/moneypool/{id}/member/{memberId/position-from/{positionFrom}/position-to/{positionTo}':
    put:
      summary: Update Member Position.
      description: |
        Update the position of  a member in a moneypool.
      operationId: updateMemberPosition
      tags:
        - moneypools
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The id of the moneypool
        - name: memberId
          in: path
          required: true
          type: BigInteger
          description: The id of the member we want to switch the position.
        - name: positionFrom
          in: path
          required: true
          type: Integer
          description: The position currently occupied by the member.
        - name: positionTo
          in: path
          required: true
          type: Integer
          description: The position that the member will occupy.
      responses:
        '200':
          description: Position successfully updated.
        '400':
          description: 'Invalid parameters, response contains detailed error'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Moneypool has not been found using the id provided as request parameter. Member has not been found using the id provided as request parameter.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: The moneypool cannot be edited in the current state..
          schema:
            $ref: '#/definitions/Error'
  '/moneypool/{id}/member/{memberId/position/{position}':
    delete:
      summary: Delete Member Position.
      description: Delete the position of  a member in a moneypool.
      operationId: deleteMemberPosition
      tags:
        - moneypools
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The id of the moneypool
        - name: memberId
          in: path
          required: true
          type: BigInteger
          description: The id of the member whose position we want to delete.
        - name: position
          in: path
          required: true
          type: Integer
          description: The position which will be deleted.
      responses:
        '200':
          description: Member position successfully deleted from the pool.
        '400':
          description: 'Invalid parameters, response contains detailed error'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Moneypool has not been found using the id provided as request parameter. Member has not been found using the id provided as request parameter.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: The moneypool cannot be edited in the current state..
          schema:
            $ref: '#/definitions/Error'
              
  '/invitation':
    post:
      summary: Create an invitation
      description: Invites a customer to join the moneypool.
      operationId: createInvitation
      tags:
        - invitations
      parameters:
        - name: Invite request parameters.
          in: body
          required: true
          schema:
            $ref: '#/definitions/InviteRequest'
      responses:
        '201':
          description: Invitation succesfully created.
          schema:
            $ref: '#/definitions/Invitation'
        '400':
          description: 'Invalid parameters, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Moneypool has not been found using the id provided as request parameter. Customer has not been found using the id provided as request parameter.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: The position is already filled.
          schema:
            $ref: '#/definitions/Error'            
  '/invitation/customer/{customerId}':
    get:
      summary: Get customer invitations
      description: Return a list with all the invitations of a customer given his identifier.
      operationId: getCustomerInvitations
      tags:
        - invitations
      parameters:
        - name: customerId
          in: path
          required: true
          type: BigInteger
          description: The customer identifier.
      responses:
        '200':
          description: Returns the invitation list. Returns empty list if there is none.
          schema:
            type: array
            items:
              $ref: '#/definitions/Invitation'
        '400':
          description: 'Invalid customer identifier format, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
  '/invitation/moneypool/{moneypoolId}':
    get:
      summary: Get moneypool invitations
      description: Return a list with all the invitations of a moneypool given his identifier.
      operationId: getMoneypoolInvitations
      tags:
        - invitations
      parameters:
        - name: moneypoolId
          in: path
          required: true
          type: BigInteger
          description: The moneypool identifier.
      responses:
        '200':
          description: 'Returns the invitation list. Returns empty list if there is none.'
          schema:
            type: array
            items:
              $ref: '#/definitions/Invitation'
        '400':
          description: 'Invalid moneypool identifier format, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
  '/invitation/{id}/accept':
    put:
      summary: Accept invitation
      description: Accept the invitation given its identifier.
      operationId: acceptInvitation
      tags:
        - invitations
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The invitation identifier.
      responses:
        '200':
          description: 'Invitation successfully accepted.'
          schema:
            $ref: '#/definitions/Invitation'
        '400':
          description: 'Invalid invitation identifier format, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
  '/invitation/{id}/decline':
    put:
      summary: Decline invitation
      description: Decline the invitation given its identifier.
      operationId: declineInvitation
      tags:
        - invitations
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The invitation identifier.
      responses:
        '200':
          description: 'Returns the invitation list. Returns empty list if there is none.'
          schema:
            $ref: '#/definitions/Invitation'
        '400':
          description: 'Invalid invitation identifier format, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
  '/requestToJoin/':
    post:
      summary: Create a joining request
      description: The customer request to join a moneypool.
      operationId: joiningRequest
      tags:
        - joining request
      parameters:
        - name: Joining request parameters.
          in: body
          required: true
          schema:
            $ref: '#/definitions/JoinRequest'
      responses:
        '201':
          description: 'Joining Request succesfully created.'
          schema:
            $ref: '#/definitions/JoiningRequest'
        '400':
          description: 'Invalid parameters, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Moneypool has not been found using the id provided as request parameter. Customer has not been found using the id provided as request parameter.'
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: The position is already filled.
          schema:
            $ref: '#/definitions/Error'            
  '/requestToJoin/customer/{customerId}':
    get:
      summary: Get customer joining requests
      description: Return a list with all the joining requests of a customer given his identifier.
      operationId: getCustomerJoiningRequest
      tags:
        - joining request
      parameters:
        - name: customerId
          in: path
          required: true
          type: BigInteger
          description: The customer identifier.
      responses:  
        '200':
          description: 'Returns the joining requests list. Returns empty list if there is none.'
          schema:
            type: array
            items:
              $ref: '#/definitions/JoiningRequest'
        '400':
          description: 'Invalid customer identifier format, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
  '/requestToJoin/moneypool/{moneypoolId}':
    get:
      summary: Get moneypool joining requests
      description: Return a list with all the joining requests of a moneypool given his identifier.
      operationId: getMoneypoolJoiningRequest
      tags:
        - joining request
      parameters:
        - name: moneypoolId
          in: path
          required: true
          type: BigInteger
          description: The moneypool identifier.
      responses:
        '200':
          description: 'Returns the joining requests list. Returns empty list if there is none.'
          schema:
            type: array
            items:
              $ref: '#/definitions/JoiningRequest'
        '400':
          description: 'Invalid moneypool identifier format, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
  '/requestToJoin/{id}/accept':
    put:
      summary: Accept joining request
      description: Accept the joining request given its identifier.
      operationId: acceptJoiningRequest
      tags:
        - joining request
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The identifier of the joining request.
      responses:
        '200':
          description: 'Joining request successfully accepted.'
          schema:
            $ref: '#/definitions/JoiningRequest'
        '400':
          description: 'Invalid joining request identifier format, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'
  '/requestToJoin/{id}/decline':
    put:
      summary: Decline joining request
      description: Decline the joining request given its identifier.
      operationId: declineJoiningRequest
      tags:
        - joining request
      parameters:
        - name: id
          in: path
          required: true
          type: BigInteger
          description: The identifier of the joining request.
      responses:
        '200':
          description: 'Joining request successfully declined.'
          schema:
            $ref: '#/definitions/JoiningRequest'
        '400':
          description: 'Invalid joining request identifier format, response contains detailed error.'
          schema:
            $ref: '#/definitions/Error'                  
definitions:
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: String
      message:
        type: String
  Country:
    type: object
    required:
      - idCountry
      - name
      - iso2
      - iso3
    properties:
      idCountry:
        description: Numeric iso of the country.
        type: BigInteger
        example: 840
      name:
        description: Name of the country
        type: String
        example: United States Of America
      iso2:
        description: Alphanumeric iso code (2-letters) of the country.
        type: String
        example: US
      iso3:
        description: Alphanumeric iso code (3-letters) of the country.
        type: String
        example: USA
  City:
    type: object
    required:
      - id
      - name
      - nameAscii
    properties:
      id:
        description: Id of the city.
        type: BigInteger
        example: 12341234
      name:
        description: Name of the city (locale based). Will return non-ascii characters for those cities that are originally written using non-latin alphabet.
        type: String
        example: London
      nameAscii:
        description: 'Name of the city (using ascii characters, for english readers).'
        type: String
        example: London
  State:
    type: object
    required:
      - id
      - name
      - nameAscii
      - code
    properties:
      id:
        description: Id of the state.
        type: BigInteger
        example: 6269131
      name:
        description: Name of the state (locale based). Will return non-ascii characters for those states that are originally written using non-latin alphabet.
        type: String
        example: England
      nameAscii:
        description: 'Name of the state (using ascii characters, for english readers).'
        type: String
        example: England
      code:
        description: Code of the state.
        type: String
        example: ENG
  Currency:
    type: object
    required:
      - id
      - iso
      - name
    properties:
      id:
        description: Numeric iso of the currency.
        type: BigInteger
        example: 840
      iso:
        description: Alphanumeric iso code (3-letters) of the currency.
        type: String
        example: USD
      name:
        description: Currency name
        type: String
        example: Us Dollar
  PaymentMethod:
    type: object
    required:
      - type
      - description
    properties:
      type:
        description: The payment method type.
        type: String
        example: TYPE
      description:
        description: The payment method description.
        type: String
        example: DESC
  PartnerConfiguration:
    type: object
    required:
      - name
      - currency
      - lowerLimit
      - upperLimit
      - minMembers
      - maxMembers
      - paymentMethods
    properties:
      name:
        description: The partner name.
        type: String
        example: Tester partner
      currency:
        description: The partner currency.
        type: String
        example: USD
      lowerLimit:
        description: The configured lower limit amount.
        type: BigInteger
        example: 300
      upperLimit:
        description: The configured upper limit amount.
        type: BigInteger
        example: 3000
      minMembers:
        description: The minimum number of members a community can have for this partner.
        type: String
        example: 5
      maxMembers:
        description: The maximum number of members a community can have for this partner.
        type: String
        example: 15
      paymentMethods:
        description: The different payment methods configured for this partner.
        type: array
        items:
          $ref: '#/definitions/PaymentMethod'
  SaveMoneypoolRequest:
    type: object
    required:
      - name
      - poolCode
      - startDate
      - nextPaymentDate
      - type
      - amountToSave
      - currency
      - membersRequired
      - paymentsFrequency
      - purpose
    properties:
      id:
        description: Moneypool id. It is only required to update a moneypool.
        type: BigInteger
        example: 1123
      name:
        description: Moneypool name.
        type: String
        example: Test moneypool
      poolCode:
        description: Moneypool code.
        type: String
        example: MP1
      startDate:
        description: Moneypool start date.
        type: LocalDate
        example: '2021-04-23'
      nextPaymentDate:
        description: Moneypool next payment date.
        type: LocalDate
        example: '2021-05-23'
      type:
        description: Moneypool type (PUBLIC / PRIVATE).
        type: String
        example: PUBLIC
      amountToSave:
        description: Amount which every Moneypool component will receive in his collect turn.
        type: BigDecimal
        example: 1000
      currency:
        description: Moneypool currency.
        type: String
        example: USD
      membersRequired:
        description: Number of Members required.
        type: Integer
        example: 8
      paymentsFrequency:
        description: Frequency of the payments (MONTHLY / BIMONTHLY / BIWEEKLY).
        type: String
        example: MONTHLY
      purpose:
        description: Purpose of the moneypool.
        type: String
        example: BUY TV
  SearchMoneypoolRequest:
    type: object
    required:
      - startDateFrom
      - startDateTo
      - poolCode
    properties:
      name:
        description: Moneypool name.
        type: String
        example: '2021-04-23'
      startDateFrom:
        description: Moneypool start date init.
        type: LocalDate
        example: '2021-04-23'
      startDateTo:
        description: Moneypool start date finish.
        type: LocalDate
        example: '2021-04-24'
      type:
        description: Moneypool type (PUBLIC / PRIVATE).
        type: String
        example: PUBLIC
      poolCode:
        description: Moneypool code.
        type: String
        example: MP1
      status:
        description: Status of the Moneypool.
        type: String
        example: OPENED
      amountToSave:
        description: Amount which every Moneypool component will receive in his collect turn.
        type: BigDecimal
        example: 1000
      currency:
        description: Moneypool currency.
        type: String
        example: USD
      membersRequired:
        description: Number of Members required.
        type: Integer
        example: 8
      paymentsFrequency:
        description: Frequency of the payments (MONTHLY / BIMONTHLY / BIWEEKLY).
        type: String
        example: MONTHLY
  Moneypool:
    type: object
    required:
      - id
      - name
      - poolCode
      - amountToSave
      - currency
      - membersRequired
      - paymentCycle
      - paymentCyclesTotal
      - paymentsFrequency
      - startDate
      - nextPaymentDate
      - type
      - status
      - purpose
    properties:
      id:
        description: Moneypool id.
        type: BigInteger
        example: 571418
      name:
        description: Moneypool name.
        type: String
        example: Test moneypool
      poolCode:
        description: Moneypool code.
        type: String
        example: MP1
      amountToSave:
        description: Amount which every Moneypool component will receive in his collect turn.
        type: BigDecimal
        example: 1000
      currency:
        description: Moneypool currency.
        type: String
        example: USD
      membersRequired:
        description: Number of Members required.
        type: Integer
        example: 8
      paymentCycle:
        description: Number of payment cicle.
        type: Integer
        example: 8
      paymentCyclesTotal:
        description: Number of payment cicle total.
        type: Integer
        example: 8
      paymentsFrequency:
        description: Frequency of the payments (MONTHLY / BIMONTHLY / BIWEEKLY).
        type: String
        example: MONTHLY
      startDate:
        description: Moneypool start date.
        type: LocalDate
        example: '2021-04-23'
      nextPaymentDate:
        description: Moneypool next payment date.
        type: LocalDate
        example: '2021-05-23'
      type:
        description: Moneypool type (PUBLIC / PRIVATE).
        type: String
        example: PUBLIC
      status:
        description: Status of the Moneypool (OPENED / CANCELLED / LOCKED / STARTED / FINISHED).
        type: String
        example: OPENED
      purpose:
        description: Purpose of the moneypool.
        type: String
        example: BUY TV
  MoneypoolWithBalance:
    type: object
    required:
      - id
      - name
      - poolCode
      - amountToSave
      - currency
      - membersRequired
      - paymentCycle
      - paymentCyclesTotal
      - paymentsFrequency
      - startDate
      - nextPaymentDate
      - type
      - status
      - purpose
      - currentBalance
    properties:
      id:
        description: Moneypool id.
        type: BigInteger
        example: 571418
      name:
        description: Moneypool name.
        type: String
        example: Test moneypool
      poolCode:
        description: Moneypool code.
        type: String
        example: MP1
      amountToSave:
        description: Amount which every Moneypool component will receive in his collect turn.
        type: BigDecimal
        example: 1000
      currency:
        description: Moneypool currency.
        type: String
        example: USD
      membersRequired:
        description: Number of Members required.
        type: Integer
        example: 8
      paymentCycle:
        description: Number of payment cicle.
        type: Integer
        example: 8
      paymentCyclesTotal:
        description: Number of payment cicle total.
        type: Integer
        example: 8
      paymentsFrequency:
        description: Frequency of the payments (MONTHLY / BIMONTHLY / BIWEEKLY).
        type: String
        example: MONTHLY
      startDate:
        description: Moneypool start date.
        type: LocalDate
        example: '2021-04-23'
      nextPaymentDate:
        description: Moneypool next payment date.
        type: LocalDate
        example: '2021-05-23'
      type:
        description: Moneypool type (PUBLIC / PRIVATE).
        type: String
        example: PUBLIC
      status:
        description: Status of the Moneypool.
        type: String
        example: OPENED
      purpose:
        description: Purpose of the moneypool.
        type: String
        example: BUY TV
      currentBalance:
        description: Current balance.
        type: BigDecimal
        example: '500'
  Amount:
    type: object
    required:
      - ccy
      - value
    properties:
      ccy:
        description: Currency.
        type: String
        example: EUR
      value:
        description: Amount.
        type: BigIDecimal
        example: 300.56
  Movement:
    type: object
    required:
      - id
      - amount
      - type
      - concept
      - createdDate
    properties:
      id:
        description: Movement id.
        type: BigInteger
        example: 571418
      amount:
        $ref: '#/definitions/Amount'
      type:
        description: Movement type.
        type: String
        example: CREDIT
      concept:
        description: Movement concept.
        type: String
        example: Moneypool movement
      createdDate:
        description: Movement creation daate.
        type: LocalDateTime
        example: '2021-04-23T00:00:00+02:00'
  GetMovementResponse:
    type: object
    required:
      - movements
      - currentBalance
    properties:
      movements:
        description: List of movement
        type: array
        items:
          $ref: '#/definitions/Movement'
      currentBalance:
        description: Current balance.
        type: BigDecimal
        example: '500'
  Member:
    type: object
    required:
      - memberId
      - customerId
      - positions
      - status
    properties:
      id:
        description: Member id.
        type: BigInteger
        example: 571418
      customerId:
        description: Customer id.
        type: BigInteger
        example: 571423
      positions:
        description: List of position
        type: array
        items:
          $ref: '#/definitions/MemberPosition'
      status:
        description: Member status.
        type: String
        example: ACTIVE
      joinedDate:
        description: Joined date.
        type: LocalDateTime
        example: '2021-04-23T00:00:00+02:00'
  MemberPosition:
    type: object
    required:
      - position
      - status
      - positions
      - status
    properties:
      position:
        description: Position.
        type: Integer
        example: 1
      status:
        description: Member status.
        type: String
        example: ACTIVE
  AddMemberRequest:
    type: object
    required:
      - customerId
      - position
    properties:
      customerId:
        description: The identifier of the customer we want to add to the pool.
        type: BigInteger
        example: 571418
      position:
        description: Position the member will take in the moneypool.
        type: BigInteger
        example: 5
  InviteRequest:
    type: object
    required:
      - moneypoolId 
      - customerId
      - position
    properties:
      moneypoolId:
        description: The identifier of the moneypool the customer will be invited to.
        type: BigInteger
        example: 123
      customerId:
        description: The identifier of the customer we want to invite.
        type: BigInteger
        example: 222
      position:
        description: Position the customer will take in the moneypool.
        type: Integer
        example: 5
  JoinRequest:
    type: object
    required:
      - moneypoolId 
      - customerId
      - position
    properties:
      moneypoolId:
        description: The id of the moneypool the customer is requesting to join.
        type: BigInteger
        example: 123
      customerId:
        description: The identifier of the customer who is doing the request.
        type: BigInteger
        example: 222
      position:
        description: Position the customer will take in the moneypool.
        type: Integer
        example: 5    
  Invitation:
    type: object
    required:
      - id
      - moneypoolId 
      - customerId
      - position
      - status
      - expirationDate
    properties:
      id:
        description: The invitation identifier.
        type: BigInteger
        example: 11
      moneypoolId:
        description: The moneypool identifier the customer is invited to.
        type: BigInteger
        example: 123
      customerId:
        description: The invited customer identifier.
        type: BigInteger
        example: 222
      position:
        description: The position of the customer.
        type: Integer
        example: 5
      status:
        description: The invitation status.
        type: String
        example: "PENDING"
      expirationDate:
        description: The invitation expiration date.
        type: LocalDateTime
        example: '2021-04-23T00:00:00+02:00'
  JoiningRequest:
    type: object
    required:
      - id
      - moneypoolId 
      - customerId
      - position
      - status
      - expirationDate
    properties:
      id:
        description: The joining request identifier.
        type: BigInteger
        example: 14
      moneypoolId:
        description: The moneypool identifier the customer is requesting to join.
        type: BigInteger
        example: 123
      customerId:
        description: The customer who request to join identifier.
        type: BigInteger
        example: 222
      position:
        description: The position of the customer.
        type: Integer
        example: 5
      status:
        description: The joining request status.
        type: String
        example: "PENDING"
      expirationDate:
        description: The joining request expiration date.
        type: LocalDateTime
        example: '2021-04-23T00:00:00+02:00'    
securityDefinitions:
  JWT:
    description: 'You can obtain a JSON Web Token (`access_token`), using our OpenID Connect Authorizations Server'
    type: apiKey
    name: 'Authorization: Bearer access_token'
    in: header
security:
  - JWT: []
